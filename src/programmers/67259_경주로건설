class Solution {
    int[][] pay;
    int[][] boards;
    int[] xa = {1,0,-1,0};
    int[] ya = {0,1,0,-1};
    int answer = Integer.MAX_VALUE;
    
    public int solution(int[][] board) {
        pay = new int[board.length][board.length];
        for (int i = 0; i < board.length; i ++) {
            for (int j = 0; j < board.length; j ++) {
                pay[i][j] = Integer.MAX_VALUE;   
            }
        }
        
        boards = board;
        
        dfs(0,0,0,0,0, false);
        
        return pay[board.length-1][board.length-1];
    }
    
    private void dfs(int x, int y, int xl, int yl, int addCost, boolean trys) {
        boolean t = trys;
        int newX, newY, newCost;
        for (int i = 0; i < 4; i ++) {
            newX = x + xa[i];
            newY = y + ya[i];
            
            if (xl == newX || yl == newY) {
                newCost = addCost + 100;
            } else {
                newCost = addCost + 600;
            }
            
            if (isValid(newX, newY, newCost)) {
                if (pay[newX][newY] > newCost) {
                    pay[newX][newY] = newCost;
                    t = false;
                } else {
                    if (t) return;
                    t = true;
                }
                
                dfs(newX, newY, x, y, newCost, t);
            }
        }
    }
    
    private boolean isValid(int x, int y, int cost) {
        if (x < 0 || x >= pay.length || y < 0 || y >= pay.length) {
            return false;
        }
        
        if (boards[x][y] == 1) return false;
        
        return true;
    }
}
